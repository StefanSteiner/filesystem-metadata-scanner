plugins {
    id 'java'
    id 'application'
    id 'eclipse'
    id 'idea'
}

group = 'com.example.filesystem'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

dependencies {
    // Hyper API dependencies from HAPI_JAVA_PACKAGE (required)
    def hapiPackage = System.getenv('HAPI_JAVA_PACKAGE')
    if (!hapiPackage) {
        throw new GradleException("HAPI_JAVA_PACKAGE environment variable must be set to the Hyper API Java package directory")
    }

    // Use compileOnly for IDE support and implementation for runtime
    compileOnly fileTree(dir: "${hapiPackage}/lib", include: '*.jar')
    implementation fileTree(dir: "${hapiPackage}/lib", include: '*.jar')
    println "Using Hyper API JARs from: ${hapiPackage}/lib"

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

application {
    mainClass = 'com.example.filesystem.LoadFilesystemMetadata'
}

test {
    useJUnitPlatform()
}

// No JAR copying needed - always use HAPI_JAVA_PACKAGE

// Helper function to setup Hyper API paths from HAPI_JAVA_PACKAGE
def setupHyperApiPaths() {
    def hapiPackage = System.getenv('HAPI_JAVA_PACKAGE')
    if (!hapiPackage) {
        throw new GradleException("HAPI_JAVA_PACKAGE environment variable must be set")
    }

    def hapiDir = file(hapiPackage)
    if (!hapiDir.exists()) {
        throw new GradleException("HAPI_JAVA_PACKAGE directory does not exist: ${hapiPackage}")
    }

    // Look for hyperd.exe in common locations within the Hyper API package
    def possibleHyperdPaths = [
        "${hapiPackage}/lib/hyper/hyperd.exe",                    // Windows typical path
        "${hapiPackage}/lib/hyper/hyperd",                       // Linux/Mac typical path
        "${hapiPackage}/hyper/hyperd.exe",                       // Alternative Windows path
        "${hapiPackage}/hyper/hyperd",                           // Alternative Linux/Mac path
        "${hapiPackage}/bin/hyperd.exe",                         // Another possible Windows path
        "${hapiPackage}/bin/hyperd"                              // Another possible Linux/Mac path
    ]

    def hyperdPath = possibleHyperdPaths.find { file(it).exists() }

    if (hyperdPath) {
        def hyperdDir = file(hyperdPath).parent
        println "Found hyperd at: ${hyperdPath}"
        println "Setting Hyper native library path to: ${hyperdDir}"

        return [
            'tableau.hyper.libpath': hyperdDir,
            'java.library.path': hyperdDir
        ]
    } else {
        throw new GradleException("Could not find hyperd executable in HAPI_JAVA_PACKAGE. Searched in: ${possibleHyperdPaths}")
    }
}

// Configure the default run task
run {
    doFirst {
        def hyperProps = setupHyperApiPaths()
        hyperProps.each { key, value ->
            systemProperty key, value
        }
    }
}

// Custom run task with better argument handling
task runWithArgs(type: JavaExec) {
    group = 'application'
    description = 'Run the filesystem metadata scanner with arguments'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = application.mainClass

    // Enable console input
    standardInput = System.in

    // Setup Hyper API paths
    doFirst {
        def hyperProps = setupHyperApiPaths()
        hyperProps.each { key, value ->
            systemProperty key, value
        }
    }

    // Pass system properties and arguments
    systemProperties = System.properties
    if (project.hasProperty('args')) {
        args(project.property('args').toString().split(','))
    }
}

// Custom task to show usage
task usage {
    group = 'help'
    description = 'Show usage information for the filesystem metadata scanner'
    doLast {
        println """
Filesystem Metadata Scanner Usage:

REQUIRED Setup:
    HAPI_JAVA_PACKAGE environment variable MUST be set to your Hyper API Java package directory:
    
    Windows (PowerShell):
        \$env:HAPI_JAVA_PACKAGE = "C:\\path\\to\\hyper-api-java"
        
    Windows (CMD):
        set HAPI_JAVA_PACKAGE=C:\\path\\to\\hyper-api-java
        
    Linux/macOS:
        export HAPI_JAVA_PACKAGE=/path/to/hyper-api-java

Build and run:
    gradlew build
    gradlew run

Run with arguments:
    gradlew run --args="--root /path/to/scan --depth 5 --verbose"

Available arguments:
    --root <path>         : Directory to scan (default: user home)
    --depth <number>      : Maximum scan depth (default: 3, range: 1-20)
    --skip-hidden         : Skip hidden and system files
    --verbose             : Show detailed analysis results
    --query-existing <file> : Query existing database instead of scanning

Examples:
    gradlew run --args="--root . --depth 2"
    gradlew run --args="--root C:\\Users\\username\\Documents --depth 4 --skip-hidden --verbose"
    gradlew run --args="--query-existing my_scan_metadata.hyper --verbose"

Note: The build will FAIL if HAPI_JAVA_PACKAGE is not set or invalid.
        """
    }
}

// IDE Configuration
eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                def hapiPackage = System.getenv('HAPI_JAVA_PACKAGE')
                if (hapiPackage) {
                    def hapiDir = file(hapiPackage)
                    if (hapiDir.exists()) {
                        fileTree(dir: "${hapiPackage}/lib", include: '*.jar').each { jar ->
                            classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.Library(fileReference(jar)))
                        }
                    }
                }
            }
        }
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        iml {
            withXml {
                def hapiPackage = System.getenv('HAPI_JAVA_PACKAGE')
                if (hapiPackage) {
                    def hapiDir = file(hapiPackage)
                    if (hapiDir.exists()) {
                        def moduleElement = it.asNode()
                        def component = moduleElement.component.find { it.'@name' == 'NewModuleRootManager' }
                        if (component) {
                            fileTree(dir: "${hapiPackage}/lib", include: '*.jar').each { jar ->
                                component.appendNode('orderEntry', [type: 'module-library']).appendNode('library').with {
                                    appendNode('CLASSES').appendNode('root', [url: "jar://${jar.absolutePath}!/"])
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

// Task to help IDEs recognize dependencies
task refreshIDE {
    description = 'Refreshes IDE understanding of dependencies'
    group = 'ide'

    doLast {
        def hapiPackage = System.getenv('HAPI_JAVA_PACKAGE')
        if (hapiPackage) {
            println "Hyper API package location: ${hapiPackage}"
            println "Available JARs:"
            fileTree(dir: "${hapiPackage}/lib", include: '*.jar').each { jar ->
                println "  - ${jar.name}"
            }
            println "\nTo fix IDE issues:"
            println "1. Run: ./gradlew cleanEclipse eclipse cleanIdea idea"
            println "2. Refresh your IDE project"
            println "3. For VS Code, reload the window (Cmd+R)"
            println "4. If you see package name errors, ensure src/main/java is set as source root"
            println "5. In VS Code: Cmd+Shift+P -> 'Java: Reload projects'"
        } else {
            println "HAPI_JAVA_PACKAGE not set. Please set it first."
        }
    }
}
